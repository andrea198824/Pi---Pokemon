{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Henry\\\\Final PI\\\\Pi---Pokemon\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPokemon } from \"../actions\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"./Card\";\nimport Pagination from \"./Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const dispatch = useDispatch();\n  const allPokemon = useSelector(state => state.pokemons);\n  const [order, setOrder] = useState('');\n  const [orderr, setOrderr] = useState(\"\"); //cambiar nombres\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pokemonPerPage, setDogsPerPage] = useState(12);\n  const indexOfLastPokemon = currentPage * pokemonPerPage;\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonPerPage;\n  const currentPokemon = allPokemon.slice(indexOfFirstPokemon, indexOfLastPokemon); //usestate= añadiendo estado a nuestro componenete funcional\n  //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\n\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \n  //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\n\n\n  useEffect(() => {\n    dispatch(getPokemon());\n  }, [dispatch]);\n\n  function handleClick(e) {\n    e.preventDefault(); //preventDefault se lo paso para que no se rompa \n\n    dispatch(getPokemon()); // esto me lo resetea por si se bugea, y me trae todo denuevo\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Probando 1, 2, 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      pokemonPerPage: pokemonPerPage,\n      allPokemon: allPokemon.length,\n      pagination: pagination\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentPokemon.map(c => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: '/home/' + c.id,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    name: c.name,\n                    image: c.image,\n                    temperament: c.types.map(temp => temp.name)\n                  }, c.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 62,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"VayBR6rq/dcOhNrPkRk7PfsBaJk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/andre/Desktop/Henry/Final PI/Pi---Pokemon/PI-Pokemon-main/client/src/components/Home.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","getPokemon","Link","Card","Pagination","Home","dispatch","allPokemon","state","pokemons","order","setOrder","orderr","setOrderr","currentPage","setCurrentPage","pokemonPerPage","setDogsPerPage","indexOfLastPokemon","indexOfFirstPokemon","currentPokemon","slice","pagination","pageNumber","handleClick","e","preventDefault","length","map","c","id","name","image","types","temp"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACIC,UADJ,QAGO,YAHP;AAIA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,IAAT,GAAe;AAAA;;AAC1B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,UAAU,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAA9B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC,CAJ0B,CAIe;;AACzC,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACmB,cAAD,EAAiBC,cAAjB,IAAmCpB,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAMqB,kBAAkB,GAAGJ,WAAW,GAAGE,cAAzC;AACA,QAAMG,mBAAmB,GAAGD,kBAAkB,GAAGF,cAAjD;AACA,QAAMI,cAAc,GAAGb,UAAU,CAACc,KAAX,CAAiBF,mBAAjB,EAAsCD,kBAAtC,CAAvB,CAT0B,CAWtB;AACJ;;AAGA,QAAMI,UAAU,GAAKC,UAAD,IAAgB;AAChCR,IAAAA,cAAc,CAACQ,UAAD,CAAd;AACH,GAFD,CAf0B,CAmB1B;AACI;;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AAChBQ,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACH,GAFY,EAEV,CAACK,QAAD,CAFU,CAAT;;AAIJ,WAASkB,WAAT,CAAqBC,CAArB,EAAwB;AACpBA,IAAAA,CAAC,CAACC,cAAF,GADoB,CACA;;AACpBpB,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR,CAFoB,CAEG;AAC1B;;AACD,sBACI;AAAA,4BAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,eAKI,QAAC,UAAD;AACQ,MAAA,cAAc,EAAEe,cADxB;AAEQ,MAAA,UAAU,EAAET,UAAU,CAACoB,MAF/B;AAGQ,MAAA,UAAU,EAAEL;AAHpB;AAAA;AAAA;AAAA;AAAA,YALJ,eAUoB;AAAA,gBAEJF,cAAc,CAACQ,GAAf,CAAoBC,CAAD,IAAO;AACtB,4BACI,QAAC,KAAD,CAAO,QAAP;AAAA,iCAEI;AAAA,mCACI;AAAA,qCACI,QAAC,IAAD;AAAO,gBAAA,EAAE,EAAE,WAAWA,CAAC,CAACC,EAAxB;AAAA,uCACI;AAAA,yCACI,QAAC,IAAD;AAAM,oBAAA,IAAI,EAAED,CAAC,CAACE,IAAd;AAAoB,oBAAA,KAAK,EAAEF,CAAC,CAACG,KAA7B;AACI,oBAAA,WAAW,EACPH,CAAC,CAACI,KAAF,CAAQL,GAAR,CAAaM,IAAD,IAAUA,IAAI,CAACH,IAA3B;AAFR,qBAE+CF,CAAC,CAACC,EAFjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAiBH,OAlBD;AAFI;AAAA;AAAA;AAAA;AAAA,YAVpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqCH;;GAlEuBzB,I;UACHN,W,EACEC,W;;;KAFCK,I","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getPokemon,\r\n\r\n} from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport Pagination from \"./Pagination\"\r\n\r\nexport default function Home(){\r\n    const dispatch = useDispatch()\r\n    const allPokemon = useSelector((state) => state.pokemons)\r\n    const [order, setOrder] = useState('')\r\n    const [orderr, setOrderr] = useState(\"\");//cambiar nombres\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [pokemonPerPage, setDogsPerPage] = useState(12)\r\n    const indexOfLastPokemon = currentPage * pokemonPerPage\r\n    const indexOfFirstPokemon = indexOfLastPokemon - pokemonPerPage\r\n    const currentPokemon = allPokemon.slice(indexOfFirstPokemon, indexOfLastPokemon)\r\n\r\n        //usestate= añadiendo estado a nuestro componenete funcional\r\n    //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\r\n\r\n\r\n    const pagination = ((pageNumber) => {\r\n        setCurrentPage(pageNumber)\r\n    })\r\n\r\n    // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \r\n        //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\r\n        useEffect(() => { \r\n        dispatch(getPokemon());\r\n    }, [dispatch])\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault(); //preventDefault se lo paso para que no se rompa \r\n        dispatch(getPokemon()) // esto me lo resetea por si se bugea, y me trae todo denuevo\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            \r\n                <h1>Probando 1, 2, 3</h1>\r\n            \r\n            <Pagination\r\n                    pokemonPerPage={pokemonPerPage}\r\n                    allPokemon={allPokemon.length}\r\n                    pagination={pagination}\r\n                />\r\n                            <div>\r\n                    {\r\n                        currentPokemon.map((c) => {\r\n                            return (\r\n                                <React.Fragment>\r\n\r\n                                    <div>\r\n                                        <div >\r\n                                            <Link  to={'/home/' + c.id}>\r\n                                                <div  >\r\n                                                    <Card name={c.name} image={c.image}\r\n                                                        temperament={\r\n                                                            c.types.map((temp) => temp.name)} key={c.id} />\r\n                                                </div>\r\n                                            </Link>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}