{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Henry\\\\Final PI\\\\Pi---Pokemon\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPokemon, getTypes } from \"../actions\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"./Card\";\nimport Pagination from \"./Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const dispatch = useDispatch();\n  const types = useSelector(state => state.types); //const pokemons = useSelector((state)=> state.pokemons);\n\n  const state = useSelector(state => state); //const [,setOrder] = useState('');\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const pokemonPage = 12;\n  const lastPokemon = currentPage * pokemonPage; // 1 * 12 = 12\n\n  const firstPokemon = lastPokemon - pokemonPage; // 12 - 12 = 0\n\n  const currentPokemon = state.pokemons.slice(firstPokemon, lastPokemon); //usestate= añadiendo estado a nuestro componenete funcional\n  //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\n\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \n  //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\n\n\n  useEffect(() => {\n    dispatch(getPokemon());\n    dispatch(getType());\n  });\n\n  function handleClick(e) {\n    e.preventDefault(); //preventDefault se lo paso para que no se rompa \n\n    dispatch(getPokemon()); // esto me lo resetea por si se bugea, y me trae todo denuevo\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Probando 1, 2, 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      pokemonPerPage: pokemonPerPage,\n      allPokemon: allPokemon.length,\n      pagination: pagination\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentPokemon.map(c => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: '/home/' + c.id,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    name: c.name,\n                    image: c.image,\n                    temperament: c.types.map(temp => temp.name)\n                  }, c.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"JuWRnvPM/M4YSXpiGGgBBWi+vHI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/andre/Desktop/Henry/Final PI/Pi---Pokemon/PI-Pokemon-main/client/src/components/Home.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","getPokemon","getTypes","Link","Card","Pagination","Home","dispatch","types","state","currentPage","setCurrentPage","pokemonPage","lastPokemon","firstPokemon","currentPokemon","pokemons","slice","pagination","pageNumber","getType","handleClick","e","preventDefault","pokemonPerPage","allPokemon","length","map","c","id","name","image","temp"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACIC,UADJ,EAEIC,QAFJ,QAIO,YAJP;AAKA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAEvB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,KAAK,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,KAAlB,CAAzB,CAHuB,CAIvB;;AACA,QAAMC,KAAK,GAAGT,WAAW,CAAES,KAAD,IAAWA,KAAZ,CAAzB,CALuB,CAMvB;;AACA,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA+Bd,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAMe,WAAW,GAAG,EAApB;AACA,QAAMC,WAAW,GAAGH,WAAW,GAAGE,WAAlC,CATuB,CASwB;;AAC/C,QAAME,YAAY,GAAGD,WAAW,GAAGD,WAAnC,CAVuB,CAUyB;;AAChD,QAAMG,cAAc,GAAGN,KAAK,CAACO,QAAN,CAAeC,KAAf,CAAqBH,YAArB,EAAkCD,WAAlC,CAAvB,CAXuB,CAa3B;AACA;;AAGA,QAAMK,UAAU,GAAKC,UAAD,IAAgB;AAChCR,IAAAA,cAAc,CAACQ,UAAD,CAAd;AACH,GAFD,CAjB2B,CAqB3B;AACA;;;AACArB,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,QAAQ,CAACN,UAAU,EAAX,CAAR;AACCM,IAAAA,QAAQ,CAACa,OAAO,EAAR,CAAR;AACJ,GAHQ,CAAT;;AAKA,WAASC,WAAT,CAAqBC,CAArB,EAAwB;AACpBA,IAAAA,CAAC,CAACC,cAAF,GADoB,CACA;;AACpBhB,IAAAA,QAAQ,CAACN,UAAU,EAAX,CAAR,CAFoB,CAEG;AAC1B;;AACD,sBACI;AAAA,4BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII,QAAC,UAAD;AACI,MAAA,cAAc,EAAEuB,cADpB;AAEI,MAAA,UAAU,EAAEC,UAAU,CAACC,MAF3B;AAGI,MAAA,UAAU,EAAER;AAHhB;AAAA;AAAA;AAAA;AAAA,YAJJ,eASI;AAAA,gBAEQH,cAAc,CAACY,GAAf,CAAoBC,CAAD,IAAO;AACtB,4BACI,QAAC,KAAD,CAAO,QAAP;AAAA,iCAEI;AAAA,mCACI;AAAA,qCACI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAE,WAAWA,CAAC,CAACC,EAAvB;AAAA,uCACI;AAAA,yCACI,QAAC,IAAD;AAAM,oBAAA,IAAI,EAAED,CAAC,CAACE,IAAd;AAAoB,oBAAA,KAAK,EAAEF,CAAC,CAACG,KAA7B;AACI,oBAAA,WAAW,EACPH,CAAC,CAACpB,KAAF,CAAQmB,GAAR,CAAaK,IAAD,IAAUA,IAAI,CAACF,IAA3B;AAFR,qBAE+CF,CAAC,CAACC,EAFjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAiBH,OAlBD;AAFR;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCE;;GAnEkBvB,I;UAECP,W,EACHC,W,EAEAA,W;;;KALEM,I","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getPokemon,\r\n    getTypes,\r\n\r\n} from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport Pagination from \"./Pagination\"\r\n\r\nexport default function Home() {\r\n\r\n        const dispatch = useDispatch();\r\n        const types = useSelector((state) => state.types);\r\n        //const pokemons = useSelector((state)=> state.pokemons);\r\n        const state = useSelector((state) => state)\r\n        //const [,setOrder] = useState('');\r\n        const [currentPage,setCurrentPage] = useState(1);\r\n        const pokemonPage = 12;\r\n        const lastPokemon = currentPage * pokemonPage; // 1 * 12 = 12\r\n        const firstPokemon = lastPokemon - pokemonPage; // 12 - 12 = 0\r\n        const currentPokemon = state.pokemons.slice(firstPokemon,lastPokemon);\r\n\r\n    //usestate= añadiendo estado a nuestro componenete funcional\r\n    //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\r\n\r\n\r\n    const pagination = ((pageNumber) => {\r\n        setCurrentPage(pageNumber)\r\n    })\r\n\r\n    // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \r\n    //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\r\n    useEffect(()=>{\r\n        dispatch(getPokemon());\r\n         dispatch(getType());\r\n    })\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault(); //preventDefault se lo paso para que no se rompa \r\n        dispatch(getPokemon()) // esto me lo resetea por si se bugea, y me trae todo denuevo\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <h1>Probando 1, 2, 3</h1>\r\n\r\n            <Pagination\r\n                pokemonPerPage={pokemonPerPage}\r\n                allPokemon={allPokemon.length}\r\n                pagination={pagination}\r\n            />\r\n            <div>\r\n                {\r\n                    currentPokemon.map((c) => {\r\n                        return (\r\n                            <React.Fragment>\r\n\r\n                                <div>\r\n                                    <div >\r\n                                        <Link to={'/home/' + c.id}>\r\n                                            <div  >\r\n                                                <Card name={c.name} image={c.image}\r\n                                                    temperament={\r\n                                                        c.types.map((temp) => temp.name)} key={c.id} />\r\n                                            </div>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )}\r\n"]},"metadata":{},"sourceType":"module"}