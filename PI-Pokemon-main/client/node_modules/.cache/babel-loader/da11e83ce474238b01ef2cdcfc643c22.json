{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Henry\\\\Final PI\\\\Pi---Pokemon\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport '../css/Home.css';\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPokemon, getTypes } from \"../actions\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"./Card\";\nimport Pagination from \"./Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const dispatch = useDispatch();\n  const allPokemons = useSelector(state => state.pokemons);\n  console.log(allPokemons);\n  const state = useSelector(state => state); //const [,setOrder] = useState('');\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const pokemonPerPage = 12;\n  const lastPokemon = currentPage * pokemonPerPage;\n  const firstPokemon = lastPokemon - pokemonPerPage;\n  const currentPokemon = allPokemons.slice(firstPokemon, lastPokemon); //usestate= añadiendo estado a nuestro componenete funcional\n  //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\n\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \n  //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\n\n\n  useEffect(() => {\n    dispatch(getAllPokemons());\n    dispatch(getType());\n  }, [dispatch]);\n\n  function handleClick(e) {\n    e.preventDefault(); //preventDefault se lo paso para que no se rompa \n\n    dispatch(getPokemon()); // esto me lo resetea por si se bugea, y me trae todo denuevo\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Elige a tu Pokemon!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        pokemonPerPage: pokemonPerPage,\n        state: state.length,\n        pagination: pagination\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: currentPokemon === null || currentPokemon === void 0 ? void 0 : currentPokemon.map(c => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                className: \"tit\",\n                to: '/home/' + c.id,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    name: c.name,\n                    image: c.image,\n                    types: c.types.map(c => c.name)\n                  }, c.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"B8sVB8ZX7U/ta4t855PELGIe+Kw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/andre/Desktop/Henry/Final PI/Pi---Pokemon/PI-Pokemon-main/client/src/components/Home.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","getPokemon","getTypes","Link","Card","Pagination","Home","dispatch","allPokemons","state","pokemons","console","log","currentPage","setCurrentPage","pokemonPerPage","lastPokemon","firstPokemon","currentPokemon","slice","pagination","pageNumber","getAllPokemons","getType","handleClick","e","preventDefault","length","map","c","id","name","image","types"],"mappings":"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","sourcesContent":["import '../css/Home.css';\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getPokemon,\r\n    getTypes,\r\n} from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport Pagination from \"./Pagination\"\r\n\r\nexport default function Home() {\r\n\r\n    const dispatch = useDispatch();\r\n    const allPokemons = useSelector((state) => state.pokemons);\r\n    console.log(allPokemons);\r\n    const state = useSelector((state) => state)\r\n    //const [,setOrder] = useState('');\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const pokemonPerPage = 12;\r\n    const lastPokemon = currentPage * pokemonPerPage;\r\n    const firstPokemon = lastPokemon - pokemonPerPage;\r\n    const currentPokemon = allPokemons.slice(firstPokemon, lastPokemon);\r\n\r\n    //usestate= añadiendo estado a nuestro componenete funcional\r\n    //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\r\n\r\n\r\n    const pagination = ((pageNumber) => {\r\n        setCurrentPage(pageNumber)\r\n    })\r\n\r\n    // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \r\n    //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\r\n    useEffect(()=>{\r\n        dispatch(getAllPokemons());\r\n         dispatch(getType());\r\n         \r\n     },[dispatch]);\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault(); //preventDefault se lo paso para que no se rompa \r\n        dispatch(getPokemon()) // esto me lo resetea por si se bugea, y me trae todo denuevo\r\n    }\r\n    return (\r\n        <div className='home'>\r\n            <div className='center'>\r\n                <h1>Elige a tu Pokemon!</h1>\r\n            </div>\r\n            <div>\r\n            <Pagination\r\n                pokemonPerPage={pokemonPerPage}\r\n                state={state.length}\r\n                pagination={pagination}\r\n            />\r\n            </div>\r\n            <div className='main'>\r\n                {\r\n                    currentPokemon?.map((c) => {\r\n                        return (\r\n                            <React.Fragment>\r\n\r\n                                <div>\r\n                                    <div >\r\n                                        <Link className='tit' to={'/home/' + c.id}>\r\n                                            <div  >\r\n                                                <Card name={c.name} image={c.image}\r\n                                                    types={\r\n                                                        c.types.map((c) => c.name)} key={c.id} />\r\n                                            </div>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}