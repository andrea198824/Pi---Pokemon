{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Henry\\\\Final PI\\\\Pi---Pokemon\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPokemon, getTypes, getDetail, getDetailByName, postPokemon, filterPokemonCreated, filterPokemonType, orderByName } from \"../actions\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"./Card\"; //import SearchBar from \"./SearchBar\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const dispatch = useDispatch();\n  const allPokemon = useSelector(state => state.pokemon);\n  const [order, setOrder] = useState('');\n  const [orderr, setOrderr] = useState(\"\"); //cambiar nombres\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pokemonPerPage, setDogsPerPage] = useState(8);\n  const indexOfLastPokemon = currentPage * pokemonPerPage;\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonPerPage;\n  const currentPokemon = allPokemon.slice(indexOfFirstPokemon, indexOfLastPokemon); //usestate= añadiendo estado a nuestro componenete funcional\n  //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\n\n  const paginado = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  const allTemp = useSelector(state => state.type); // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \n  //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\n\n  useEffect(() => {\n    dispatch(getPokemon());\n  }, [dispatch]);\n  useEffect(() => {\n    // hooks-acepta una función como argumento\n    dispatch(getTypes());\n  }, [dispatch]);\n\n  function handleClick(e) {\n    e.preventDefault(); //preventDefault se lo paso para que no se rompa \n\n    dispatch(getPokemon()); // esto me lo resetea por si se bugea, y me trae todo denuevo\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: currentPokemon.map(c => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                className: \"tit\",\n                to: '/home/' + c.id,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    name: c.name,\n                    image: c.image,\n                    temperament: c.type.map(temp => temp.name.concat(\" \"))\n                  }, c.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"wkwEJwA3f/+ht1MrQIaK6DLwcaM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/andre/Desktop/Henry/Final PI/Pi---Pokemon/PI-Pokemon-main/client/src/components/Home.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","getPokemon","getTypes","getDetail","getDetailByName","postPokemon","filterPokemonCreated","filterPokemonType","orderByName","Link","Card","Home","dispatch","allPokemon","state","pokemon","order","setOrder","orderr","setOrderr","currentPage","setCurrentPage","pokemonPerPage","setDogsPerPage","indexOfLastPokemon","indexOfFirstPokemon","currentPokemon","slice","paginado","pageNumber","allTemp","type","handleClick","e","preventDefault","map","c","id","name","image","temp","concat"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getPokemon,\r\n    getTypes,\r\n    getDetail,\r\n    getDetailByName,\r\n    postPokemon,\r\n    filterPokemonCreated,\r\n    filterPokemonType,\r\n    orderByName\r\n} from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card\"\r\n\r\n\r\n//import SearchBar from \"./SearchBar\";\r\n\r\nexport default function Home(){\r\n    const dispatch = useDispatch()\r\n    const allPokemon = useSelector((state) => state.pokemon)\r\n    const [order, setOrder] = useState('')\r\n    const [orderr, setOrderr] = useState(\"\");//cambiar nombres\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [pokemonPerPage, setDogsPerPage] = useState(8)\r\n    const indexOfLastPokemon = currentPage * pokemonPerPage\r\n    const indexOfFirstPokemon = indexOfLastPokemon - pokemonPerPage\r\n    const currentPokemon = allPokemon.slice(indexOfFirstPokemon, indexOfLastPokemon)\r\n\r\n        //usestate= añadiendo estado a nuestro componenete funcional\r\n    //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\r\n\r\n\r\n    const paginado = ((pageNumber) => {\r\n        setCurrentPage(pageNumber)\r\n    })\r\n\r\n    const allTemp = useSelector((state) => state.type);\r\n\r\n    // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \r\n        //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\r\n        useEffect(() => { \r\n        dispatch(getPokemon());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => { // hooks-acepta una función como argumento\r\n        dispatch(getTypes());\r\n    }, [dispatch])\r\n\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault(); //preventDefault se lo paso para que no se rompa \r\n        dispatch(getPokemon()) // esto me lo resetea por si se bugea, y me trae todo denuevo\r\n    }\r\n    return (\r\n        <div>\r\n                            <div className='main'>\r\n                    {\r\n                        currentPokemon.map((c) => {\r\n                            return (\r\n                                <React.Fragment>\r\n\r\n                                    <div>\r\n                                        <div >\r\n                                            <Link className='tit' to={'/home/' + c.id}>\r\n                                                <div  >\r\n                                                    <Card name={c.name} image={c.image}\r\n                                                        temperament={\r\n                                                            c.type.map((temp) => temp.name.concat(\" \"))} key={c.id} />\r\n                                                </div>\r\n                                            </Link>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}