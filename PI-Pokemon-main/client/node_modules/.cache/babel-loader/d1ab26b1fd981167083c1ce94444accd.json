{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Henry\\\\Final PI\\\\Pi---Pokemon\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport '../css/Home.css';\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPokemon, getTypes, filterPokemonCreated, filterPokemonType } from \"../actions\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"./Card\";\nimport Pagination from \"./Pagination\";\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const dispatch = useDispatch();\n  const allPokemons = useSelector(state => state.pokemons);\n  const state = useSelector(state => state);\n  const [currentPage, setCurrentPage] = useState(1);\n  const pokemonPerPage = 12;\n  const lastPokemon = currentPage * pokemonPerPage;\n  const firstPokemon = lastPokemon - pokemonPerPage;\n  const currentPokemon = allPokemons.slice(firstPokemon, lastPokemon); //usestate= añadiendo estado a nuestro componenete funcional\n  //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\n\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  const allType = useSelector(state => state.types); // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \n  //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\n\n  useEffect(() => {\n    dispatch(getPokemon());\n    dispatch(getTypes());\n  }, [dispatch]);\n\n  function handleClick(e) {\n    e.preventDefault(); //preventDefault se lo paso para que no se rompa \n\n    dispatch(getPokemon()); // esto me lo resetea por si se bugea, y me trae todo denuevo\n  }\n\n  function handleFilterCreated(e) {\n    e.preventDefault();\n    dispatch(filterPokemonCreated(e.target.value));\n  }\n\n  function handleFilterByType(e) {\n    e.preventDefault();\n    dispatch(filterPokemonType(e.target.value));\n  }\n\n  if (!allPokemons.length) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Elige a tus Pokemon!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onClick: e => handleFilterCreated(e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"All\",\n            children: \"Todos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Created\",\n            children: \"Creado por ti!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Source\",\n            children: \"Base de datos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            handleClick(e);\n          },\n          children: \"Volver a cargar todos los Pokemon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onClick: e => handleFilterByType(e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Filtrar por tipo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), allType.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: c.name,\n            children: c.name\n          }, c.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          pokemonPerPage: pokemonPerPage,\n          allPokemons: allPokemons.length,\n          pagination: pagination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: currentPokemon === null || currentPokemon === void 0 ? void 0 : currentPokemon.map(c => {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  className: \"tit\",\n                  to: '/home/pokemons/' + c.id,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(Card, {\n                      name: c.name,\n                      image: c.image,\n                      types: c.types.map(c => c.name)\n                    }, c.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(Home, \"Niq2l7f1M1YhjUHFlRHBtN869ZM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/andre/Desktop/Henry/Final PI/Pi---Pokemon/PI-Pokemon-main/client/src/components/Home.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","getPokemon","getTypes","filterPokemonCreated","filterPokemonType","Link","Card","Pagination","Loading","Home","dispatch","allPokemons","state","pokemons","currentPage","setCurrentPage","pokemonPerPage","lastPokemon","firstPokemon","currentPokemon","slice","pagination","pageNumber","allType","types","handleClick","e","preventDefault","handleFilterCreated","target","value","handleFilterByType","length","map","c","name","id","image"],"mappings":"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","sourcesContent":["import '../css/Home.css';\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getPokemon,\r\n    getTypes,\r\n    filterPokemonCreated,\r\n    filterPokemonType\r\n} from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport Pagination from \"./Pagination\"\r\nimport Loading from './Loading';\r\n\r\nexport default function Home() {\r\n\r\n    const dispatch = useDispatch();\r\n    const allPokemons = useSelector((state) => state.pokemons);\r\n    const state = useSelector((state) => state)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const pokemonPerPage = 12;\r\n    const lastPokemon = currentPage * pokemonPerPage;\r\n    const firstPokemon = lastPokemon - pokemonPerPage;\r\n    const currentPokemon = allPokemons.slice(firstPokemon, lastPokemon);\r\n\r\n    //usestate= añadiendo estado a nuestro componenete funcional\r\n    //Ejecutar el método useState con el valor inicial de nuestro estado nos devuelve un array que tendrá el valor del estado y un método para actualizar el estado.\r\n\r\n\r\n    const pagination = ((pageNumber) => {\r\n        setCurrentPage(pageNumber)\r\n    })\r\n\r\n    const allType = useSelector((state) => state.types);\r\n\r\n    // un hook que recibe como parámetro una función que se ejecutará cada vez que nuestro componente se renderice, ya sea por un cambio de estado, \r\n    //por recibir props nuevas o, y esto es importante, porque es la primera vez que se monta.\r\n    useEffect(() => {\r\n        dispatch(getPokemon());\r\n        dispatch(getTypes());\r\n    },[dispatch]);\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault(); //preventDefault se lo paso para que no se rompa \r\n        dispatch(getPokemon()) // esto me lo resetea por si se bugea, y me trae todo denuevo\r\n    }\r\n    function handleFilterCreated(e) {\r\n        e.preventDefault(); \r\n        dispatch(filterPokemonCreated(e.target.value)); \r\n    } \r\n    function handleFilterByType(e) {\r\n        e.preventDefault();\r\n        dispatch(filterPokemonType((e.target.value)));\r\n    }\r\n\r\n    if(!allPokemons.length){\r\n        return(\r\n            <Loading/>\r\n        )\r\n    }else{\r\n\r\n    return (\r\n        <div className='home'>\r\n            <div className='center'>\r\n                <h1>Elige a tus Pokemon!</h1>\r\n            </div>\r\n            <div  className='center'>\r\n            <select onClick={(e) => handleFilterCreated(e)}>\r\n                        <option value='All'>Todos</option>\r\n                        <option value='Created'>Creado por ti!</option>\r\n                        <option value='Source'>Base de datos</option>\r\n\r\n                    </select>\r\n                    </div>\r\n                    <div className='center'>\r\n                    <button onClick={e => { handleClick(e) }}>\r\n                        Volver a cargar todos los Pokemon\r\n                    </button>\r\n                    <select onClick={(e) => handleFilterByType(e)}>\r\n                        <option value=''>Filtrar por tipo</option>\r\n                        {allType.map((c) => (\r\n                            <option key={c.id} value={c.name}>{c.name}</option>))}\r\n                    </select>\r\n                </div>\r\n            <div className='center'>\r\n            <Pagination\r\n                pokemonPerPage={pokemonPerPage}\r\n                allPokemons={allPokemons.length}\r\n                pagination={pagination}\r\n            />\r\n            </div>\r\n            <div className='main'>\r\n                {\r\n                    currentPokemon?.map((c) => {\r\n                        return (\r\n                            <React.Fragment>\r\n\r\n                                <div>\r\n                                    <div >\r\n                                        <Link className='tit' to={'/home/pokemons/' + c.id}>\r\n                                            <div  >\r\n                                                <Card name={c.name} image={c.image}\r\n                                                    types={\r\n                                                        c.types.map((c) => c.name)} key={c.id} />\r\n                                            </div>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n            }}\r\n"]},"metadata":{},"sourceType":"module"}