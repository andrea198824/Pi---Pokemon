{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Henry\\\\Final PI\\\\Pi---Pokemon\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\SearchBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getDetailByName } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const formulario = document.querySelector('#formulario');\n  const boton = document.querySelector('#boton');\n\n  const filtrar = () => {\n    console.log(formulario.value);\n  };\n\n  boton.addEventListener('click', filtrar); //lo que está tipeando el usuario va a ser mi estado local name\n\n  function handleIn(e) {\n    e.preventDefault();\n    setName(e.target.value); //el value del input que ingresa por búsqueda va a setear el value del state\n\n    /* console.log(name) */\n  }\n\n  function handleSub(e) {\n    e.preventDefault();\n    dispatch(getDetailByName(name));\n    dispatch(getDetail(hp)); //acá lo que tipea el usuario le llega desde el estado local a la función que llama al back con ese name\n\n    setName(''); //para que cuando ya se hizo la busqueda no me siga mostrando el nombre ingresado, seteo el nombre en comillas\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSub,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleIn,\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Search...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 1\n  }, this);\n}\n\n_s(SearchBar, \"JZ026ztzghhswIdbIVxziEHmjuc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["C:/Users/andre/Desktop/Henry/Final PI/Pi---Pokemon/PI-Pokemon-main/client/src/components/SearchBar.jsx"],"names":["React","useState","useDispatch","getDetailByName","SearchBar","dispatch","name","setName","formulario","document","querySelector","boton","filtrar","console","log","value","addEventListener","handleIn","e","preventDefault","target","handleSub","getDetail","hp"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,YAAhC;;AAKA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMO,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAnB;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;;AACA,QAAME,OAAO,GAAG,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAU,CAACO,KAAvB;AACD,GAFD;;AAGAJ,EAAAA,KAAK,CAACK,gBAAN,CAAuB,OAAvB,EAAgCJ,OAAhC,EARkC,CAWlC;;AAGA,WAASK,QAAT,CAAkBC,CAAlB,EAAqB;AACnBA,IAAAA,CAAC,CAACC,cAAF;AACAZ,IAAAA,OAAO,CAACW,CAAC,CAACE,MAAF,CAASL,KAAV,CAAP,CAFmB,CAEM;;AACzB;AACD;;AAED,WAASM,SAAT,CAAmBH,CAAnB,EAAsB;AACpBA,IAAAA,CAAC,CAACC,cAAF;AACAd,IAAAA,QAAQ,CAACF,eAAe,CAACG,IAAD,CAAhB,CAAR;AACAD,IAAAA,QAAQ,CAACiB,SAAS,CAACC,EAAD,CAAV,CAAR,CAHoB,CAGI;;AACxBhB,IAAAA,OAAO,CAAC,EAAD,CAAP,CAJoB,CAIP;AACd;;AAIF,sBACD;AAAA,2BACM;AAAM,MAAA,QAAQ,EAAEc,SAAhB;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEJ,QAA7B;AAAuC,QAAA,KAAK,EAAEX;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,UADC;AASC;;GAtCsBF,S;UACLF,W;;;KADKE,S","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getDetailByName } from \"../actions\";\r\n\r\n\r\n\r\n\r\nexport default function SearchBar() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const formulario = document.querySelector('#formulario');\r\n  const boton = document.querySelector('#boton');\r\n  const filtrar = () => {\r\n    console.log(formulario.value);\r\n  }\r\n  boton.addEventListener('click', filtrar)\r\n\r\n  \r\n  //lo que está tipeando el usuario va a ser mi estado local name\r\n\r\n\r\n  function handleIn(e) {\r\n    e.preventDefault();\r\n    setName(e.target.value); //el value del input que ingresa por búsqueda va a setear el value del state\r\n    /* console.log(name) */\r\n  }\r\n\r\n  function handleSub(e) {\r\n    e.preventDefault();\r\n    dispatch(getDetailByName(name));\r\n    dispatch(getDetail(hp)) //acá lo que tipea el usuario le llega desde el estado local a la función que llama al back con ese name\r\n    setName(''); //para que cuando ya se hizo la busqueda no me siga mostrando el nombre ingresado, seteo el nombre en comillas\r\n  }\r\n\r\n\r\n\r\n return (\r\n<div>\r\n      <form onSubmit={handleSub}>\r\n        <input type=\"text\" onChange={handleIn} value={name} />\r\n        \r\n        <input type=\"submit\" value=\"Search...\" />\r\n      </form>\r\n    </div>\r\n  );\r\n } "]},"metadata":{},"sourceType":"module"}